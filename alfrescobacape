#!/bin/bash
# Backup of Alfresco
# Based on script written by Chris Newald
# Rewriteen by Bruno Oliveira

# Configuration:
  TIMESTAMP=$(date +%mM-%dD-%YA-%HH-%MM)	  	# Create timestamp using format month, day, year, hour, minute
  DUMP_NUM=12				         	# Number of backups to keep
  AL_FOLDER="/opt/alfresco-community"		  	# Alfresco folder
  AL_DATA="/opt/alfresco-community/alf_data"	 	# Alfresco data folder
  DB_HOME="/opt/alfresco-community/postgresql"	  	# PostgreSQL folder
  TARGET_FOLDER="/opt/alfresco-community/backup"	# Alfresco backup folder
  POSTGRESPASS="THUya01"                        	# Postgresql password

# Function - Stop Alfresco
function al_stop()
{
  $AL_FOLDER/alfresco.sh stop

  # If Alfresco does not stop we MUST exit script
  # Backing up files with Alfresco working may
  # corrupt data indexes!!
  if [ "$?" != "0" ]; then
    echo "Alfresco Stop FAILED - STOP SCRIPT!"
    exit 1;
  fi
}

# Function - Start Alfresco
function al_start()
{
  $AL_FOLDER/alfresco.sh start
}

# Function - Start Postgress SQL Server
function p_start()
{
  $DB_HOME/scripts/ctl.sh start
}

# Function - Stop Postgress SQL Server
function p_stop()
{
  $DB_HOME/scripts/ctl.sh stop
}

#----------------------------------------
# 1 - Begin by stopping Alfresco
#----------------------------------------
  al_stop 

#----------------------------------------
# 2 - Backup the Alfresco database
#----------------------------------------
  # Start the postgress database (which is stopped automatically
  # by the Alfresco stop script
  p_start 

  # Create a filename for the database tar
  DB_DUMP=alfresco_db_${TIMESTAMP}.tar

  # Criar diretorio onde ficam os bacapes  
  mkdir -p $TARGET_FOLDER/$TIMESTAMP

  # Backup the database to the target folder
  # -Ft = Export database as tar file
  PGPASSWORD=$POSTGRESPASS $DB_HOME/bin/pg_dump -U alfresco alfresco -Ft > $TARGET_FOLDER/$TIMESTAMP/$DB_DUMP
  chown postgres $TARGET_FOLDER/$TIMESTAMP/$DB_DUMP  

  # Check if an error was returned
  if [ "$?" = "0" ]; then
    echo "Database export worked!" > $TARGET_FOLDER/$TIMESTAMP/alfrescobackup.log
  else
    echo "Database export failed!" > $TARGET_FOLDER/$TIMESTAMP/alfrescobackup.log
  fi

#------------------------------------------
# 3 - Backup the Alfresco content folder
#------------------------------------------
  # Create a file name with timestamp
  AL_DUMP=alfresco_data_${TIMESTAMP}.tgz

  # Tar the Alfresco data folder to the backup
  # to the backup folder specified
  tar zcf $TARGET_FOLDER/$TIMESTAMP/$AL_DUMP $AL_DATA >> $TARGET_FOLDER/$TIMESTAMP/alfrescobackup.log
  
  # Alfresco data check if an error was returned
  if [ "$?" = "0" ]; then
    echo "Alfresco alf_data backup worked!" >> $TARGET_FOLDER/$TIMESTAMP/alfrescobackup.log
  else
    echo "Alfresco alf_data backup failed!" >> $TARGET_FOLDER/$TIMESTAMP/alfrescobackup.log
  fi

#------------------------------------------
# 4- Start the Alfresco service
#------------------------------------------
  p_stop

#  al_start 

#------------------------------------------
# 5 - Merge the database and data files
#------------------------------------------

  # Create a backup filename with timestamp
  tar zcf $TARGET_FOLDER/$TIMESTAMP.tgz $TARGET_FOLDER/$TIMESTAMP/$AL_DUMP $TARGET_FOLDER/$TIMESTAMP/$DB_DUMP $TARGET_FOLDER/$TIMESTAMP/alfrescobackup.log

  # If files were merged, delete the duplicates
  if [ -f "$TARGET_FOLDER/$TIMESTAMP.tgz" ]; then
    rm -rf $TARGET_FOLDER/$TIMESTAMP/
#------------------------------------------
# 6- Backup the Alfresco content to google drive folder
#------------------------------------------
# Drive binary found in https://www.experts-exchange.com/articles/29279/Backup-Linux-Servers-to-Google-Drive.html
# To install use 
# wget -O drive https://drive.google.com/uc?id=0B3X9GlR6EmbnMHBMVWtKaEZXdDg 
# mv drive /usr/sbin/drive 
# chmod 755 /usr/sbin/drive
# Enter drive on terminal 
# You will see a link in your terminal, which you can paste into your browser.  
# You may be prompted to login to Google.  Next give Gdrive allow permissions, then Copy/Paste the code from the page into the terminal.  
# Google drive command is now ready.
    /usr/sbin/drive upload -f $TARGET_FOLDER/$TIMESTAMP.tgz

  fi

#------------------------------------------
# 6 - Remove backups older than DUMP_NUM days
#------------------------------------------
    
  bkplist=( $(find $TARGET_FOLDER/* -mtime +${DUMP_NUM} | cut -d\/ -f2) )
  amount=$(find $TARGET_FOLDER/* -mtime +${DUMP_NUM} | cut -d\/ -f2 | wc -l)

  for (( i = 0; i < $amount; i++ )); do
    	rm -rf $TARGET_FOLDER/${bkplist[$i]}
    	echo ${bkplist[$i]} >> $TARGET_FOLDER/teste
	echo $? >> $TARGET_FOLDER/teste
    gdelete=$(/usr/sbin/drive list -q "'root' in parents" | grep ${bkplist[$i]} | cut -d" " -f1)

  if [ "$?" = "0" ]; then
    /usr/sbin/drive delete -i $gdelete  
  else 
    echo "No backups in google drive to remove"
  fi
  done
#Unset variable postgresql password
  unset POSTGRESPASS 
