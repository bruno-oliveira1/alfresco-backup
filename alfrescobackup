#!/bin/bash
# Backup of Alfresco
# Based on script written by Chris Newald
# Rewriteen by Bruno Oliveira

# Configuration:
  TIMESTAMP=$(date +%mM-%dD-%YA-%HH-%MM)	  	# Create timestamp using format month, day, year, hour, minute
  DUMP_NUM=7				         	# Number of backups to keep
  AL_FOLDER="/opt/alfresco-community"		  	# Alfresco folder
  AL_DATA="/opt/alfresco-community/alf_data"	 	# Alfresco data folder
  DB_HOME="/opt/alfresco-community/postgresql"	  	# PostgreSQL folder
  TARGET_FOLDER="/opt/alfresco-community/backup"	# Alfresco backup folder
  POSTGRESPASS="Password"                        	# Postgresql password

#----------------------------------------
# 0 - Functions
#----------------------------------------
 
# Function - Stop Alfresco
function al_stop()
{
  $AL_FOLDER/alfresco.sh stop > /dev/null 2>&1
}

# Function - Start Alfresco
function al_start()
{
  $AL_FOLDER/alfresco.sh start > /dev/null 2>&1
}

# Function - Start Postgress SQL Server
function p_start()
{
  $DB_HOME/scripts/ctl.sh start > /dev/null 2>&1
}

# Function - Stop Postgress SQL Server
function p_stop()
{
  $DB_HOME/scripts/ctl.sh stop > /dev/null 2>&1
}

#----------------------------------------
# 1 - Begin by stopping Alfresco
#----------------------------------------

  al_stop 

#----------------------------------------
# 2 - Backup the Alfresco database
#----------------------------------------

  # Start the postgress database (which is stopped automatically
  # by the Alfresco stop script
  p_start 

  # Create a filename for the database tar
  DB_DUMP=alfresco_db_${TIMESTAMP}.tar

  # Criar diretorio onde ficam os bacapes  
  mkdir -p $TARGET_FOLDER/$TIMESTAMP

  # Backup the database to the target folder
  # -Ft = Export database as tar file
  PGPASSWORD=$POSTGRESPASS $DB_HOME/bin/pg_dump -U alfresco alfresco -Ft > $TARGET_FOLDER/$TIMESTAMP/$DB_DUMP
  chown postgres $TARGET_FOLDER/$TIMESTAMP/$DB_DUMP  
  
  # Create a log with the date of the script
  echo " " >> /var/log/alfrescobackup.log
  echo $TIMESTAMP >> /var/log/alfrescobackup.log

  # Check if an error was returned
  if [ "$?" = "0" ]; then
      echo "Database export worked!" >> /var/log/alfrescobackup.log
    else
      echo "Database export failed!" >> /var/log/alfrescobackup.log
  fi

#------------------------------------------
# 3 - Backup the Alfresco content folder
#------------------------------------------
  # Create a file name with timestamp
  AL_DUMP=alfresco_data_${TIMESTAMP}.tgz

  # Tar the Alfresco data folder to the backup
  # to the backup folder specified
  tar zcf $TARGET_FOLDER/$TIMESTAMP/$AL_DUMP $AL_DATA >> /var/log/alfrescobackup.log
  
  # Alfresco data check if an error was returned
  if [ "$?" = "0" ]; then
    echo "Alfresco alf_data backup worked!" >> /var/log/alfrescobackup.log
  else
    echo "Alfresco alf_data backup failed!" >> /var/log/alfrescobackup.log
  fi

#------------------------------------------
# 4- Start the Alfresco service
#------------------------------------------

  p_stop && al_stop 

  al_start 

#------------------------------------------
# 5 - Merge the database and data files
#------------------------------------------

  # Create a backup filename with timestamp
  tar zcf $TARGET_FOLDER/$TIMESTAMP.tgz $TARGET_FOLDER/$TIMESTAMP/$AL_DUMP $TARGET_FOLDER/$TIMESTAMP/$DB_DUMP

  # If files were merged, delete the duplicates
  if [ -f "$TARGET_FOLDER/$TIMESTAMP.tgz" ]; then
    rm -rf $TARGET_FOLDER/$TIMESTAMP/

#------------------------------------------
# 6- Backup the Alfresco content to online storage services
#------------------------------------------
  
  # See online-backup file for instructions to proceed with mega or google drive

  # For google drive uncomment
  #  /usr/sbin/driv3e upload -f $TARGET_FOLDER/$TIMESTAMP.tgz
  
  # For mega uncomment  
  #  /usr/bin/megaput --no-progress $TARGET_FOLDER/$TIMESTAMP.tgz

  fi
   
#------------------------------------------
# 7 - Remove backups older than DUMP_NUM days
#------------------------------------------
    
  bkplist=( $(find $TARGET_FOLDER/ -mtime +${DUMP_NUM} | cut -d\/ -f2) )
  amount=$(find $TARGET_FOLDER/ -mtime +${DUMP_NUM} | cut -d\/ -f5 | wc -l)

  for (( i = 0; i < $amount; i++ )); do
    	rm -rf $TARGET_FOLDER/${bkplist[$i]}
	
  # For google drive uncomment
#      gdelete=$(/usr/sbin/drive list -q "'root' in parents" | grep ${bkplist[$i]} | cut -d" " -f1)

#     if [ "$?" = "0" ]; then
#          /usr/sbin/drive delete -i $gdelete  
#       else 
#          echo "No backups in google drive to remove"
#     fi

  # For mega uncomment  
#      mdelete=$(/usr/bin/megals | grep ${bkplist[$i]} )
#     if [ "$?" = "0" ]; then
#          /usr/bin/megarm $mdelete
#       else
#          echo "No backups in mega to remove"
#     fi

  done
